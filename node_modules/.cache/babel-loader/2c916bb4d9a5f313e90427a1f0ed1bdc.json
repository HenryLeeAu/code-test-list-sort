{"ast":null,"code":"import axios from \"axios\";\nimport config from \"../config\";\n\nconst getCurrentWeather = ({\n  city\n}) => new Promise((resolve, reject) => {\n  axios.get(`https://api.weatherapi.com/v1/forecast.json?key=${config.weatherApiKey}&q=${city}&days=3&aqi=no&alerts=no`).then(({\n    data\n  }) => {\n    resolve(data);\n  }).catch(err => {\n    var _err$response$data$er, _err$response, _err$response$data, _err$response$data$er2;\n\n    reject((_err$response$data$er = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : (_err$response$data$er2 = _err$response$data.error) === null || _err$response$data$er2 === void 0 ? void 0 : _err$response$data$er2.message) !== null && _err$response$data$er !== void 0 ? _err$response$data$er : \"Unexpected error, please try again.\");\n  });\n});\n\nconst services = {\n  getCurrentWeather\n};\nexport default services;","map":{"version":3,"sources":["/Users/leehen/Documents/code-test-list-sort/src/services/index.tsx"],"names":["axios","config","getCurrentWeather","city","Promise","resolve","reject","get","weatherApiKey","then","data","catch","err","response","error","message","services"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AACzBC,EAAAA;AADyB,CAAD,KAKxB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/BN,EAAAA,KAAK,CACFO,GADH,CAEK,mDAAkDN,MAAM,CAACO,aAAc,MAAKL,IAAK,0BAFtF,EAIGM,IAJH,CAIQ,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAc;AAClBL,IAAAA,OAAO,CAACK,IAAD,CAAP;AACD,GANH,EAOGC,KAPH,CAOUC,GAAD,IAAS;AAAA;;AACdN,IAAAA,MAAM,2CACJM,GAAG,CAACC,QADA,wEACJ,cAAcH,IADV,iFACJ,mBAAoBI,KADhB,2DACJ,uBAA2BC,OADvB,yEAEF,qCAFE,CAAN;AAID,GAZH;AAaD,CAdD,CALF;;AAqBA,MAAMC,QAAQ,GAAG;AACfd,EAAAA;AADe,CAAjB;AAIA,eAAec,QAAf","sourcesContent":["import axios from \"axios\";\nimport { WeatherSuccessT } from \"./type\";\nimport config from \"../config\";\n\nconst getCurrentWeather = ({\n  city,\n}: {\n  city: string;\n}): Promise<WeatherSuccessT> =>\n  new Promise((resolve, reject) => {\n    axios\n      .get(\n        `https://api.weatherapi.com/v1/forecast.json?key=${config.weatherApiKey}&q=${city}&days=3&aqi=no&alerts=no`\n      )\n      .then(({ data }) => {\n        resolve(data);\n      })\n      .catch((err) => {\n        reject(\n          err.response?.data?.error?.message ??\n            \"Unexpected error, please try again.\"\n        );\n      });\n  });\n\nconst services = {\n  getCurrentWeather,\n};\n\nexport default services;\n"]},"metadata":{},"sourceType":"module"}