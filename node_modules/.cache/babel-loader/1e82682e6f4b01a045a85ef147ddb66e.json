{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/leehen/Documents/code-test-list-sort/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport services from \"./services\";\nimport StatusWrapper from \"./StatusWrapper\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport FutureWeather from \"./FutureWeather\";\nimport { LoadingStatusT } from \"./StatusWrapper/type\";\n\nconst App = () => {\n  _s();\n\n  const [currentCity, setCurrentCity] = React.useState(\"\");\n  const [weatherInfo, setWeatherInfo] = React.useState(null);\n  const [loadingStatus, setLoadingStatus] = React.useState(LoadingStatusT.idle);\n  const [messageInfo, setMessage] = React.useState(\"\");\n  const disabled = loadingStatus === LoadingStatusT.loading;\n\n  const onCityStringChange = e => {\n    setCurrentCity(e.currentTarget.value);\n  };\n\n  const onWeatherSearch = async e => {\n    e.preventDefault();\n    setLoadingStatus(LoadingStatusT.loading);\n\n    try {\n      const res = await services.getCurrentWeather({\n        city: currentCity\n      });\n      setLoadingStatus(LoadingStatusT.success);\n      setWeatherInfo(res);\n      setMessage(\"\");\n    } catch (error) {\n      setLoadingStatus(LoadingStatusT.failed);\n      setWeatherInfo(null);\n      setMessage(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onWeatherSearch,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"city\",\n        name: \"city\",\n        \"data-testid\": \"city\",\n        value: currentCity,\n        onChange: onCityStringChange,\n        disabled: disabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: disabled,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatusWrapper, {\n      status: loadingStatus,\n      message: messageInfo,\n      children: weatherInfo && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: weatherInfo.location.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CurrentWeather, {\n          currentTemp: weatherInfo.current.temp_c,\n          feelsLikeTemp: weatherInfo.current.feelslike_c,\n          condition: weatherInfo.current.condition.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), weatherInfo.forecast.forecastday.map(({\n          date,\n          day: {\n            maxtemp_c,\n            mintemp_c,\n            avgtemp_c,\n            condition\n          }\n        }) => /*#__PURE__*/_jsxDEV(FutureWeather, {\n          date: date,\n          maxTemp: maxtemp_c,\n          minTemp: mintemp_c,\n          avgTemp: avgtemp_c,\n          condition: condition.text\n        }, date, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"VNLgR3lqjddIt9TU5wCYzZoaqVU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/leehen/Documents/code-test-list-sort/src/App.tsx"],"names":["React","services","StatusWrapper","CurrentWeather","FutureWeather","LoadingStatusT","App","currentCity","setCurrentCity","useState","weatherInfo","setWeatherInfo","loadingStatus","setLoadingStatus","idle","messageInfo","setMessage","disabled","loading","onCityStringChange","e","currentTarget","value","onWeatherSearch","preventDefault","res","getCurrentWeather","city","success","error","failed","location","name","current","temp_c","feelslike_c","condition","text","forecast","forecastday","map","date","day","maxtemp_c","mintemp_c","avgtemp_c"],"mappings":"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","sourcesContent":["import * as React from \"react\";\n\nimport services from \"./services\";\nimport StatusWrapper from \"./StatusWrapper\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport FutureWeather from \"./FutureWeather\";\n\nimport { WeatherSuccessT, WeatherFailedT } from \"./services/type\";\nimport { LoadingStatusT } from \"./StatusWrapper/type\";\n\nconst App: React.FC = () => {\n  const [currentCity, setCurrentCity] = React.useState(\"\");\n  const [weatherInfo, setWeatherInfo] = React.useState<WeatherSuccessT | null>(\n    null\n  );\n  const [loadingStatus, setLoadingStatus] = React.useState<LoadingStatusT>(\n    LoadingStatusT.idle\n  );\n  const [messageInfo, setMessage] = React.useState<WeatherFailedT>(\"\");\n\n  const disabled = loadingStatus === LoadingStatusT.loading;\n\n  const onCityStringChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setCurrentCity(e.currentTarget.value);\n  };\n\n  const onWeatherSearch = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    setLoadingStatus(LoadingStatusT.loading);\n\n    try {\n      const res = await services.getCurrentWeather({ city: currentCity });\n      setLoadingStatus(LoadingStatusT.success);\n      setWeatherInfo(res);\n      setMessage(\"\");\n    } catch (error) {\n      setLoadingStatus(LoadingStatusT.failed);\n      setWeatherInfo(null);\n      setMessage(error);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={onWeatherSearch}>\n        <label htmlFor=\"city\">City</label>\n        <input\n          id=\"city\"\n          name=\"city\"\n          data-testid=\"city\"\n          value={currentCity}\n          onChange={onCityStringChange}\n          disabled={disabled}\n        />\n        <button type=\"submit\" disabled={disabled}>\n          Search\n        </button>\n      </form>\n      <StatusWrapper status={loadingStatus} message={messageInfo}>\n        {weatherInfo && (\n          <>\n            <h1>{weatherInfo.location.name}</h1>\n            <CurrentWeather\n              currentTemp={weatherInfo.current.temp_c}\n              feelsLikeTemp={weatherInfo.current.feelslike_c}\n              condition={weatherInfo.current.condition.text}\n            />\n            {weatherInfo.forecast.forecastday.map(\n              ({\n                date,\n                day: { maxtemp_c, mintemp_c, avgtemp_c, condition },\n              }) => (\n                <FutureWeather\n                  key={date}\n                  date={date}\n                  maxTemp={maxtemp_c}\n                  minTemp={mintemp_c}\n                  avgTemp={avgtemp_c}\n                  condition={condition.text}\n                />\n              )\n            )}\n          </>\n        )}\n      </StatusWrapper>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}